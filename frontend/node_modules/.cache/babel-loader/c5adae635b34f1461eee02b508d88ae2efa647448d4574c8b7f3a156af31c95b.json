{"ast":null,"code":"import React,{useState,useEffect}from'react';import AxiosInstance from'../../axiosinstance';import{useNavigate}from'react-router-dom';// Correctly import useNavigate\nimport'./writing.css';// This is the writing landing page, which contains all of the blogs with the first 100 words of the body text.\n// The user can then click on the title of each blog and they are then taken to the post detail page\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const WritingLandingPage=()=>{const[posts,setPosts]=useState([]);const navigate=useNavigate();const getPostData=async()=>{try{const response=await AxiosInstance.get('/writing/');if(response.status===200){setPosts(response.data);}else{console.error('Error fetching data: Response is undefined or status is not 200');}}catch(error){console.error('Error fetching data:',error.message);}};useEffect(()=>{getPostData();},[]);// Sort posts by 'created_on' date, with newest at the top\n// The sortedPosts variable uses the Array.sort() method to sort the posts array by the created_on date in ascending order (oldest first).\n// new Date(a.created_on): Converts the created_on string into a JavaScript Date object for comparison.\n// Ascending Order: Subtracts a.created_on from b.created_on. To reverse the order, you could subtract b.created_on from a.created_on.\nconst sortedPosts=[...posts].sort((a,b)=>new Date(b.created_on)-new Date(a.created_on));// Function to handle post click\nconst handlePostClick=postId=>{navigate(\"/writing/\".concat(postId));// Redirect to the detailed view of the post\n};return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{className:\"landing-page-heading\",children:\"Writing\"}),sortedPosts.length===0?/*#__PURE__*/_jsx(\"div\",{children:\"Loading...\"}):/*#__PURE__*/_jsx(\"div\",{children:sortedPosts.map(post=>/*#__PURE__*/_jsxs(\"div\",{className:\"writing-block\",children:[/*#__PURE__*/_jsx(\"h2\",{className:\"writing-title\",style:{cursor:'pointer'},onClick:()=>handlePostClick(post.id),children:post.title}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Publication date: \",new Date(post.publication_date).toLocaleDateString('en-GB',{day:'2-digit',month:'long',year:'numeric'})]}),/*#__PURE__*/_jsxs(\"p\",{children:[\"Created on: \",new Date(post.created_on).toLocaleDateString('en-GB',{day:'2-digit',month:'long',year:'numeric'})]}),/*#__PURE__*/_jsx(\"p\",{children:post.body.length>100?\"\".concat(post.body.substring(0,100),\"...\"):post.body})]},post.id))})]});};export default WritingLandingPage;// import React, { useState, useEffect } from 'react';\n// import AxiosInstance from '../../axiosinstance'; \n// import { useNavigate } from 'react-router-dom'; // Correctly import useNavigate\n// import './writing.css'\n// const WritingLandingPage = () => {\n//   const [posts, setPosts] = useState([]);\n//   const navigate = useNavigate();\n//   const getPostData = async () => {\n//     try {\n//       const response = await AxiosInstance.get('/writing/');\n//       console.log('Fetched response:', response.data);\n//       if (response.data && response.data.posts && Array.isArray(response.data.posts)) {\n//         const postsWithValidBody = response.data.posts.map(post => ({\n//           ...post,\n//           body: post.body || '', // Provide a fallback for 'body' if it's undefined\n//         }));\n//         setPosts(postsWithValidBody);\n//       } else {\n//         console.error('Error: The posts data is not an array or is missing.');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching data:', error.message);\n//     }\n//   };\n//   useEffect(() => {\n//     getPostData();\n//   }, []);\n//   // Sort posts by 'created_on' date, with newest at the top\n//   const sortedPosts = [...posts].sort((a, b) => new Date(b.created_on) - new Date(a.created_on));\n//   // Function to handle post click\n//   const handlePostClick = (postId) => {\n//     navigate(`/writing/${postId}`); // Redirect to the detailed view of the post\n//   };\n//   return (\n//     <div>\n//       <h1 className='landing-page-heading'>Writing</h1>\n//       {sortedPosts.length === 0 ? (\n//         <div>Loading...</div>\n//       ) : (\n//         <div>\n//           {sortedPosts.map((post) => (\n//             <div className=\"writing-block\" key={post.id}>\n//               <h2 className='writing-title' style={{ cursor: 'pointer' }} onClick={() => handlePostClick(post.id)}>\n//                 {post.title}\n//               </h2>\n//               <p>Publication date: {new Date(post.publication_date).toLocaleDateString('en-GB', {\n//               day: '2-digit',\n//               month: 'long',\n//               year: 'numeric',\n//               })}</p>\n//               <p>Created on: {new Date(post.created_on).toLocaleDateString('en-GB', {\n//               day: '2-digit',\n//               month: 'long',\n//               year: 'numeric',\n//               })}</p>\n//               <p>\n//                 {post.body && post.body.length > 100 \n//                   ? `${post.body.substring(0, 100)}...` \n//                   : post.body || 'No content available'}\n//               </p>\n//             </div>\n//           ))}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n// export default WritingLandingPage;","map":{"version":3,"names":["React","useState","useEffect","AxiosInstance","useNavigate","jsx","_jsx","jsxs","_jsxs","WritingLandingPage","posts","setPosts","navigate","getPostData","response","get","status","data","console","error","message","sortedPosts","sort","a","b","Date","created_on","handlePostClick","postId","concat","children","className","length","map","post","style","cursor","onClick","id","title","publication_date","toLocaleDateString","day","month","year","body","substring"],"sources":["/home/spurser/django-website-react/frontend/src/components/writing/writinglandingpage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport AxiosInstance from '../../axiosinstance'; \nimport { useNavigate } from 'react-router-dom'; // Correctly import useNavigate\nimport './writing.css'\n\n// This is the writing landing page, which contains all of the blogs with the first 100 words of the body text.\n// The user can then click on the title of each blog and they are then taken to the post detail page\nconst WritingLandingPage = () => {\n  const [posts, setPosts] = useState([]);\n  const navigate = useNavigate();\n\n  const getPostData = async () => {\n    try {\n      const response = await AxiosInstance.get('/writing/');\n      if (response.status === 200) {\n        setPosts(response.data);\n      } else {\n        console.error('Error fetching data: Response is undefined or status is not 200');\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n    }\n  };\n\n  useEffect(() => {\n    getPostData();\n  }, []);\n  \n  // Sort posts by 'created_on' date, with newest at the top\n  // The sortedPosts variable uses the Array.sort() method to sort the posts array by the created_on date in ascending order (oldest first).\n  // new Date(a.created_on): Converts the created_on string into a JavaScript Date object for comparison.\n  // Ascending Order: Subtracts a.created_on from b.created_on. To reverse the order, you could subtract b.created_on from a.created_on.\n  const sortedPosts = [...posts].sort((a, b) => new Date(b.created_on) - new Date(a.created_on));\n\n  // Function to handle post click\n  const handlePostClick = (postId) => {\n    navigate(`/writing/${postId}`); // Redirect to the detailed view of the post\n  };\n\n  return (\n    <div>\n      <h1 className='landing-page-heading'>Writing</h1>\n      {sortedPosts.length === 0 ? (\n        <div>Loading...</div>\n      ) : (\n        <div>\n          {sortedPosts.map((post) => (\n            <div className=\"writing-block\" key={post.id}>\n              <h2 className='writing-title' style={{ cursor: 'pointer' }} onClick={() => handlePostClick(post.id)}>\n                {post.title}\n              </h2>\n              <p>Publication date: {new Date(post.publication_date).toLocaleDateString('en-GB', {\n              day: '2-digit',\n              month: 'long',\n              year: 'numeric',\n              })}</p>\n              <p>Created on: {new Date(post.created_on).toLocaleDateString('en-GB', {\n              day: '2-digit',\n              month: 'long',\n              year: 'numeric',\n              })}</p>\n              <p>\n                {post.body.length > 100 ? `${post.body.substring(0, 100)}...` : post.body}\n              </p>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WritingLandingPage;\n\n// import React, { useState, useEffect } from 'react';\n// import AxiosInstance from '../../axiosinstance'; \n// import { useNavigate } from 'react-router-dom'; // Correctly import useNavigate\n// import './writing.css'\n\n// const WritingLandingPage = () => {\n//   const [posts, setPosts] = useState([]);\n//   const navigate = useNavigate();\n\n//   const getPostData = async () => {\n//     try {\n//       const response = await AxiosInstance.get('/writing/');\n//       console.log('Fetched response:', response.data);\n//       if (response.data && response.data.posts && Array.isArray(response.data.posts)) {\n//         const postsWithValidBody = response.data.posts.map(post => ({\n//           ...post,\n//           body: post.body || '', // Provide a fallback for 'body' if it's undefined\n//         }));\n//         setPosts(postsWithValidBody);\n//       } else {\n//         console.error('Error: The posts data is not an array or is missing.');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching data:', error.message);\n//     }\n//   };\n  \n\n//   useEffect(() => {\n//     getPostData();\n//   }, []);\n  \n//   // Sort posts by 'created_on' date, with newest at the top\n//   const sortedPosts = [...posts].sort((a, b) => new Date(b.created_on) - new Date(a.created_on));\n\n//   // Function to handle post click\n//   const handlePostClick = (postId) => {\n//     navigate(`/writing/${postId}`); // Redirect to the detailed view of the post\n//   };\n\n//   return (\n//     <div>\n//       <h1 className='landing-page-heading'>Writing</h1>\n//       {sortedPosts.length === 0 ? (\n//         <div>Loading...</div>\n//       ) : (\n//         <div>\n//           {sortedPosts.map((post) => (\n//             <div className=\"writing-block\" key={post.id}>\n//               <h2 className='writing-title' style={{ cursor: 'pointer' }} onClick={() => handlePostClick(post.id)}>\n//                 {post.title}\n//               </h2>\n//               <p>Publication date: {new Date(post.publication_date).toLocaleDateString('en-GB', {\n//               day: '2-digit',\n//               month: 'long',\n//               year: 'numeric',\n//               })}</p>\n//               <p>Created on: {new Date(post.created_on).toLocaleDateString('en-GB', {\n//               day: '2-digit',\n//               month: 'long',\n//               year: 'numeric',\n//               })}</p>\n//               <p>\n//                 {post.body && post.body.length > 100 \n//                   ? `${post.body.substring(0, 100)}...` \n//                   : post.body || 'No content available'}\n//               </p>\n//             </div>\n//           ))}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default WritingLandingPage;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}