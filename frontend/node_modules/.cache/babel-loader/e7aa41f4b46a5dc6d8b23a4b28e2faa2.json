{"ast":null,"code":"import React,{useEffect,useState}from'react';import AxiosInstance from'../../axiosinstance';import{useParams,useNavigate}from'react-router-dom';import DOMPurify from'dompurify';import'./writing.css';// This is the page that contains the entire post\nconst PostDetail=()=>{const{postId}=useParams();// Extract postId from URL parameters\nconst[post,setPost]=useState(null);const navigate=useNavigate();useEffect(()=>{const fetchPost=async()=>{try{const response=await AxiosInstance.get(\"/writing/\".concat(postId,\"/\"));// Fetch the specific post\nsetPost(response.data);// Set the post data to state\n}catch(error){console.error('Error fetching post details:',error);}};fetchPost();},[postId]);// Fetch post whenever postId changes\nif(!post)return/*#__PURE__*/React.createElement(\"div\",null,\"Loading...\");// Show loading state while fetching data\n// Split the post body into paragraphs based on newline characters\nconst SplitParagraphs=post.body.split('\\n').filter(paragraph=>paragraph.trim()!=='');// paragraph =>...: filter methods creates new array containing elements of old array passed from the earlier part of the function\n// The function paragraph => paragraph.trim() !== '' is an arrow function that takes a single parameter, paragraph.\n// trim method removes whitespace from both the beginning and the end of the string\n// !== '': This part checks if the trimmed paragraph is not equal to an empty string. If the result of trim() is not an empty string, \n// it means that the paragraph contains some actual content (i.e., it's not just whitespace).\n// Sanitize and modify links to open in a new tab\n//  The map() method requires a function to process each element in SplitParagraphs, and the arrow function (paragraph => ...) is passed as the argument to map().\n// The parentheses around the arrow function are necessary because you're passing the arrow function as an argument to the map() method.\n// \nconst sanitizedParagraphs=SplitParagraphs.map(paragraph=>DOMPurify.sanitize(paragraph,{ADD_ATTR:['target'],// Allow target attribute By default, sanitizers often strip attributes like target for security reasons.\n// This option explicitly allows the target attribute, enabling us to later modify links to open in a new tab.\nFORBID_TAGS:['script']// Disallow script tags for security. Prevents <script> tags from being included in the sanitized output, as they could execute harmful JavaScript code.\n// Add target=\"_blank\" to links. Ensures that any <a> tag in the sanitized HTML has the target=\"_blank\" attribute, which makes the link open in a new tab.\n}).replace(// Matches any <a> tag that does not already have a target attribute. <a\\s+ matches the <a> tag with at least one space after it.\n// (?!.*target) is a negative lookahead that ensures the target attribute is not present anywhere in the tag.\n// The /g flag means this replacement will be applied globally (to all <a> tags in the string).\n/<a\\s+(?!.*target)/g,// Adds the target=\"_blank\" attribute to the <a> tag.\n'<a target=\"_blank\" '));// Handle go back to the previous page\nconst handleGoBack=()=>{navigate(-1);// This goes back one page in history\n};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"button\",{className:\"return-button\",onClick:handleGoBack},\"Return to Writing Page\"),/*#__PURE__*/React.createElement(\"h1\",null,post.title),/*#__PURE__*/React.createElement(\"p\",null,\"Publication date:\",' ',new Date(post.publication_date).toLocaleDateString('en-GB',{day:'2-digit',month:'long',year:'numeric'})),/*#__PURE__*/React.createElement(\"p\",null,\"Created on:\",' ',new Date(post.created_on).toLocaleDateString('en-GB',{day:'2-digit',month:'long',year:'numeric'})),sanitizedParagraphs.map((paragraphs,index)=>/*#__PURE__*/React.createElement(\"p\",{key:index,dangerouslySetInnerHTML:{__html:paragraphs}// To create the link in django admin, use this format \n// <a href=\"https://www.axelos.com/resource-hub/blog/itil-4-foundation-7-tips-to-prepare\" target=\"_blank\">here</a>.\n// React dangerouslySetInnerHTML react replacement for innerHTML. It makes react aware of HTML tags in rich text editor\n// i.e. django admin interface, and renders them properly. Should be an object with the __html key passed the component. Only use with trusted sources as it makes the site vulnerable to XSS attacks.\n//  \n})));};export default PostDetail;","map":{"version":3,"names":["React","useEffect","useState","AxiosInstance","useParams","useNavigate","DOMPurify","PostDetail","postId","post","setPost","navigate","fetchPost","response","get","concat","data","error","console","createElement","SplitParagraphs","body","split","filter","paragraph","trim","sanitizedParagraphs","map","sanitize","ADD_ATTR","FORBID_TAGS","replace","handleGoBack","className","onClick","title","Date","publication_date","toLocaleDateString","day","month","year","created_on","paragraphs","index","key","dangerouslySetInnerHTML","__html"],"sources":["/home/spurser/django-website-react/frontend/src/components/writing/postdetail.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport AxiosInstance from '../../axiosinstance'; \nimport { useParams, useNavigate } from 'react-router-dom';\nimport DOMPurify from 'dompurify';\nimport './writing.css'\n\n// This is the page that contains the entire post\nconst PostDetail = () => {\n  const { postId } = useParams(); // Extract postId from URL parameters\n  const [post, setPost] = useState(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchPost = async () => {\n      try {\n        const response = await AxiosInstance.get(`/writing/${postId}/`); // Fetch the specific post\n        setPost(response.data); // Set the post data to state\n      } catch (error) {\n        console.error('Error fetching post details:', error);\n      }\n    };\n\n    fetchPost();\n  }, [postId]); // Fetch post whenever postId changes\n\n  if (!post) return <div>Loading...</div>; // Show loading state while fetching data\n\n  // Split the post body into paragraphs based on newline characters\n  const SplitParagraphs= post.body.split('\\n').filter(paragraph => paragraph.trim() !== '');\n  // paragraph =>...: filter methods creates new array containing elements of old array passed from the earlier part of the function\n  // The function paragraph => paragraph.trim() !== '' is an arrow function that takes a single parameter, paragraph.\n  // trim method removes whitespace from both the beginning and the end of the string\n  // !== '': This part checks if the trimmed paragraph is not equal to an empty string. If the result of trim() is not an empty string, \n  // it means that the paragraph contains some actual content (i.e., it's not just whitespace).\n\n  // Sanitize and modify links to open in a new tab\n  //  The map() method requires a function to process each element in SplitParagraphs, and the arrow function (paragraph => ...) is passed as the argument to map().\n  // The parentheses around the arrow function are necessary because you're passing the arrow function as an argument to the map() method.\n  // \n  const sanitizedParagraphs = SplitParagraphs.map(paragraph =>\n    DOMPurify.sanitize(paragraph, {\n      ADD_ATTR: ['target'], // Allow target attribute By default, sanitizers often strip attributes like target for security reasons.\n      // This option explicitly allows the target attribute, enabling us to later modify links to open in a new tab.\n      FORBID_TAGS: ['script'], // Disallow script tags for security. Prevents <script> tags from being included in the sanitized output, as they could execute harmful JavaScript code.\n    // Add target=\"_blank\" to links. Ensures that any <a> tag in the sanitized HTML has the target=\"_blank\" attribute, which makes the link open in a new tab.\n    }).replace(\n      // Matches any <a> tag that does not already have a target attribute. <a\\s+ matches the <a> tag with at least one space after it.\n      // (?!.*target) is a negative lookahead that ensures the target attribute is not present anywhere in the tag.\n      // The /g flag means this replacement will be applied globally (to all <a> tags in the string).\n      /<a\\s+(?!.*target)/g,\n      // Adds the target=\"_blank\" attribute to the <a> tag.\n      '<a target=\"_blank\" '\n    )\n  );\n\n    // Handle go back to the previous page\n    const handleGoBack = () => {\n      navigate(-1);  // This goes back one page in history\n    };\n\n\n    return (\n      <div>\n        <button className=\"return-button\" onClick={handleGoBack}>Return to Writing Page</button>\n        <h1>{post.title}</h1>\n        <p>\n          Publication date:{' '}\n          {new Date(post.publication_date).toLocaleDateString('en-GB', {\n            day: '2-digit',\n            month: 'long',\n            year: 'numeric',\n          })}\n        </p>\n        <p>\n          Created on:{' '}\n          {new Date(post.created_on).toLocaleDateString('en-GB', {\n            day: '2-digit',\n            month: 'long',\n            year: 'numeric',\n          })}\n        </p>\n        {/* Render each paragraph with dangerouslySetInnerHTML */}\n        {sanitizedParagraphs.map((paragraphs, index) => (\n          <p\n            key={index}\n            dangerouslySetInnerHTML={{__html: paragraphs}}\n            // To create the link in django admin, use this format \n            // <a href=\"https://www.axelos.com/resource-hub/blog/itil-4-foundation-7-tips-to-prepare\" target=\"_blank\">here</a>.\n            // React dangerouslySetInnerHTML react replacement for innerHTML. It makes react aware of HTML tags in rich text editor\n            // i.e. django admin interface, and renders them properly. Should be an object with the __html key passed the component. Only use with trusted sources as it makes the site vulnerable to XSS attacks.\n            //  \n          ></p>\n        ))}\n      </div>\n    );\n  };\n\nexport default PostDetail;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}