{"ast":null,"code":"import AxiosInstance from'../../axiosinstance';import React from'react';import{useState,useEffect}from'react';import'./todo.css';// Create a to do list that is connected via the backend database using axios. The list must be editable, whereby the user can read, update and delete items\n// CRUD: create, read, update, delete\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const ToDo=()=>{// Each item in the list\nconst[inputItem,setInputItem]=useState('');// The list itself, initialised to an empty array\nconst[list,setList]=useState([]);// Mount the page: create\n// Fetch existing data from the backend when the component mounts, before the user updates the list\n// UseEffect is a React Hook that lets you synchronize a component with an external system.\nuseEffect(()=>{fetchData();},[]);// Render item on screen, the data for the list is obtained from the database using the axios API: read\nconst fetchData=async()=>{try{const response=await AxiosInstance.get('/todo/');if(response.status===200){setList(response.data);// Update the list with data from the backend\n}else{console.error('Error fetching data: Response is undefined or status is not 200');};}catch(error){console.error('Error fetching data:',error.message);}};// Adding items to the list via the database: update\nconst handleAddTodo=async()=>{if(inputItem.trim()!==''){try{const response=await AxiosInstance.post('/todo/',{id:Math.random(),item:inputItem});// Update the list state by using the spread operator […list] to create a new array with the existing tasks in the list. \n// Append the response.data to the end of the array. Reset the inputItem state to an empty string, clearing the input field when the user clicks the button.\nsetList([...list,response.data]);// Update the list with the new item\nsetInputItem('');// Reset input field\n}catch(error){console.error('Error adding task:',error);}}};// Delete items from the list, do the same in the backend: delete\nconst handleDeleteTodo=async id=>{try{// Make a DELETE request to the backend API with the specific task ID\nawait AxiosInstance.delete(\"/todo/\".concat(id,\"/\"));// Delete the item from the list and the backend when the user presses the delete button for that item\n// Use filter to create a new list that filters out the item with the id that had been deleted\nconst updatedList=list.filter(item=>item.id!==id);setList(updatedList);// Update the list by removing the deleted task\n}catch(error){console.error('Error deleting task:',error);}};// Event handler which handles all of the changes\nconst handleInputChange=event=>{setInputItem(event.target.value);};return/*#__PURE__*/_jsxs(\"div\",{children:[\" \",/*#__PURE__*/_jsx(\"h1\",{className:\"todo-header\",children:\"To do list\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"ToDo\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"Top\",children:[/*#__PURE__*/_jsx(\"input\",{className:\"input\",type:\"text\",value:inputItem,onChange:handleInputChange,placeholder:\"Enter a task\"}),/*#__PURE__*/_jsx(\"button\",{className:\"btn\",onClick:handleAddTodo,children:\"Submit\"})]}),/*#__PURE__*/_jsx(\"ul\",{children:list.map(item=>/*#__PURE__*/_jsxs(\"li\",{className:\"task\",children:[item.item,/*#__PURE__*/_jsx(\"button\",{onClick:()=>handleDeleteTodo(item.id),children:\"Delete\"})]},item.id))})]})]});};export default ToDo;","map":{"version":3,"names":["AxiosInstance","React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","ToDo","inputItem","setInputItem","list","setList","fetchData","response","get","status","data","console","error","message","handleAddTodo","trim","post","id","Math","random","item","handleDeleteTodo","delete","concat","updatedList","filter","handleInputChange","event","target","value","children","className","type","onChange","placeholder","onClick","map"],"sources":["/home/spurser/django-website-react/frontend/src/components/todo/todo.js"],"sourcesContent":["import AxiosInstance from '../../axiosinstance'; \nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport './todo.css'\n\n// Create a to do list that is connected via the backend database using axios. The list must be editable, whereby the user can read, update and delete items\n// CRUD: create, read, update, delete\nconst ToDo = () => {\n  // Each item in the list\n  const [inputItem, setInputItem] = useState('');\n  // The list itself, initialised to an empty array\n  const [list, setList] = useState([]);\n  \n  // Mount the page: create\n  // Fetch existing data from the backend when the component mounts, before the user updates the list\n  // UseEffect is a React Hook that lets you synchronize a component with an external system.\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  // Render item on screen, the data for the list is obtained from the database using the axios API: read\n\n  const fetchData = async () => {\n    try {\n      const response = await AxiosInstance.get('/todo/');\n      if (response.status === 200) {\n        setList(response.data); // Update the list with data from the backend\n      } else {\n        console.error('Error fetching data: Response is undefined or status is not 200');\n      };\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n    }\n  };\n  \n  // Adding items to the list via the database: update\n  const handleAddTodo = async () => {\n    if (inputItem.trim() !== '') {\n      try {\n        const response = await AxiosInstance.post('/todo/', {\n          id: Math.random(),\n          item: inputItem,\n        });\n        // Update the list state by using the spread operator […list] to create a new array with the existing tasks in the list. \n        // Append the response.data to the end of the array. Reset the inputItem state to an empty string, clearing the input field when the user clicks the button.\n        setList([...list, response.data]); // Update the list with the new item\n        setInputItem(''); // Reset input field\n      } catch (error) {\n        console.error('Error adding task:', error);\n      }\n    }\n  };\n  \n  // Delete items from the list, do the same in the backend: delete\n  const handleDeleteTodo = async (id) => {\n    try {\n      // Make a DELETE request to the backend API with the specific task ID\n      await AxiosInstance.delete(`/todo/${id}/`);\n      // Delete the item from the list and the backend when the user presses the delete button for that item\n      // Use filter to create a new list that filters out the item with the id that had been deleted\n      const updatedList = list.filter((item) => item.id !== id);\n      setList(updatedList); // Update the list by removing the deleted task\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n\n  // Event handler which handles all of the changes\n  const handleInputChange = (event) => {\n    setInputItem(event.target.value);\n  };\n\n  return (\n    <div> <h1 className='todo-header'>To do list</h1>\n    <div className=\"ToDo\">\n      <div className=\"Top\">\n        <input\n          className=\"input\"\n          type=\"text\"\n          value={inputItem}\n          onChange={handleInputChange}\n          placeholder=\"Enter a task\"\n        />\n        <button className=\"btn\" onClick={handleAddTodo}>\n          Submit\n        </button>\n      </div>\n\n      <ul>\n        {list.map((item) => (\n          <li className=\"task\" key={item.id}>\n            {item.item}\n            <button onClick={() => handleDeleteTodo(item.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n  );\n};\n\nexport default ToDo;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}