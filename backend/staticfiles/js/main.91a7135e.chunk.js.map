{"version":3,"sources":["components/images/gummy-macbook.png","components/images/todo_list_demo.gif","components/images/pixeltrue-idea-1.png","components/home/home.js","axiosinstance.js","components/todo/todo.js","components/projects/projects.js","components/writing/writinglandingpage.js","components/writing/postdetail.js","components/contact/contact.js","components/about/about.js","components/header/header.js","components/app/App.js","reportWebVitals.js","index.js"],"names":["module","exports","Home","React","createElement","className","href","src","macbookImage","alt","baseURL","process","REACT_APP_URL_PRODUCTION","AxiosInstance","axios","create","withCredentials","timeout","headers","ToDo","inputItem","setInputItem","useState","list","setList","useEffect","fetchData","async","response","get","status","data","console","error","message","type","value","onChange","event","target","placeholder","onClick","trim","post","id","Math","random","item","map","key","delete","concat","updatedList","filter","handleDeleteTodo","Projects","projects","setProjects","loading","setLoading","setError","err","fetchProjects","todoListGif","Link","to","aria-label","project","index","name","data-priority","image","github_url","rel","description","WritingLandingPage","posts","setPosts","navigate","useNavigate","getPostData","sortedPosts","sort","a","b","Date","created_on","length","style","cursor","handlePostClick","postId","title","publication_date","toLocaleDateString","day","month","year","body","substring","PostDetail","useParams","setPost","fetchPost","sanitizedParagraphs","split","paragraph","DOMPurify","sanitize","ADD_ATTR","FORBID_TAGS","replace","handleGoBack","paragraphs","dangerouslySetInnerHTML","__html","ContactPage","formData","setFormData","email","subject","submitted","setSubmitted","handleChange","_objectSpread","handleReset","onSubmit","e","preventDefault","htmlFor","required","rows","About","aboutImage","Header","dropdownOpen","setDropdownOpen","toggleDropdown","aria-haspopup","aria-expanded","SocialIcon","url","height","width","App","Routes","Route","path","element","Todo","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","createRoot","document","getElementById","render","StrictMode","BrowserRouter"],"mappings":"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","file":"static/js/main.91a7135e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/gummy-macbook.d8f9521a.png\";","module.exports = __webpack_public_path__ + \"static/media/todo_list_demo.ab8cb27b.gif\";","module.exports = __webpack_public_path__ + \"static/media/pixeltrue-idea-1.e4b71016.png\";","import React from 'react';\nimport './home.css';\nimport macbookImage from '../images/gummy-macbook.png';\n\nfunction Home() {\n    return (\n        <div> <h1>Solmaz Purser</h1>\n        <h2>Software developer and writer</h2>\n        <div className=\"home-container\">\n            <div className=\"links-container\">\n                <a href=\"/about\" className=\"link-bubble link1\">About</a>\n                <a href=\"/projects\" className=\"link-bubble link2\">Projects</a>\n                <a href=\"/writing\" className=\"link-bubble link3\">Writing</a>\n                <a href=\"/contact\" className=\"link-bubble link4\">Contact</a>\n                <a href=\"/todo\" className=\"link-bubble link5\">To do list</a>\n            </div>\n            {/* Image with attribution */}\n            <div className=\"home-image-container\">\n                <img \n                    src={macbookImage} \n                    alt=\"MacBook Illustration\" \n                    className=\"home-image\" \n                />\n            </div>\n        </div>\n        </div>\n    );\n}\n\nexport default Home;","import axios from 'axios';\n\n// Set the base URL for the deployed Django backend using REACT_APP_URL_DEVELOPMENT and REACT_APP_URL_PRODUCTION\nlet baseURL;\n\nif (process.env.NODE_ENV === 'development') {\n    baseURL = process.env.REACT_APP_URL_DEVELOPMENT;  // Development URL\n} else if (process.env.NODE_ENV === 'production') {\n    baseURL = process.env.REACT_APP_URL_PRODUCTION;  // Production URL\n} else {\n    baseURL = 'http://127.0.0.1:8000';  // Default to development if no specific environment variable is found\n}\n\n\n// Create an Axios instance with the dynamic baseURL\nconst AxiosInstance = axios.create({\n    withCredentials: true,\n    baseURL: baseURL, // Use the dynamic baseURL variable here\n    timeout: 10000, // Optional: Set a timeout for requests\n    headers: {\n        'Content-Type': 'application/json',\n    },\n});\n\nexport default AxiosInstance;","import AxiosInstance from '../../axiosinstance'; \nimport React from 'react';\nimport { useState, useEffect } from 'react';\nimport './todo.css'\n\n// Create a to do list that is connected via the backend database using axios. The list must be editable, whereby the user can read, update and delete items\n// CRUD: create, read, update, delete\nconst ToDo = () => {\n  // Each item in the list\n  const [inputItem, setInputItem] = useState('');\n  // The list itself, initialised to an empty array\n  const [list, setList] = useState([]);\n  \n  // Mount the page: create\n  // Fetch existing data from the backend when the component mounts, before the user updates the list\n  // UseEffect is a React Hook that lets you synchronize a component with an external system.\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  // Render item on screen, the data for the list is obtained from the database using the axios API: read\n\n  const fetchData = async () => {\n    try {\n      const response = await AxiosInstance.get('/todo/');\n      if (response.status === 200) {\n        setList(response.data); // Update the list with data from the backend\n      } else {\n        console.error('Error fetching data: Response is undefined or status is not 200');\n      };\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n    }\n  };\n  \n  // Adding items to the list via the database: update\n  const handleAddTodo = async () => {\n    if (inputItem.trim() !== '') {\n      try {\n        const response = await AxiosInstance.post('/todo/', {\n          id: Math.random(),\n          item: inputItem,\n        });\n        // Update the list state by using the spread operator […list] to create a new array with the existing tasks in the list. \n        // Append the response.data to the end of the array. Reset the inputItem state to an empty string, clearing the input field when the user clicks the button.\n        setList([...list, response.data]); // Update the list with the new item\n        setInputItem(''); // Reset input field\n      } catch (error) {\n        console.error('Error adding task:', error);\n      }\n    }\n  };\n  \n  // Delete items from the list, do the same in the backend: delete\n  const handleDeleteTodo = async (id) => {\n    try {\n      // Make a DELETE request to the backend API with the specific task ID\n      await AxiosInstance.delete(`/todo/${id}/`);\n      // Delete the item from the list and the backend when the user presses the delete button for that item\n      // Use filter to create a new list that filters out the item with the id that had been deleted\n      const updatedList = list.filter((item) => item.id !== id);\n      setList(updatedList); // Update the list by removing the deleted task\n    } catch (error) {\n      console.error('Error deleting task:', error);\n    }\n  };\n\n  // Event handler which handles all of the changes\n  const handleInputChange = (event) => {\n    setInputItem(event.target.value);\n  };\n\n  return (\n    <div> <h1 className='todo-header'>To do list</h1>\n    <div className=\"ToDo\">\n      <div className=\"Top\">\n        <input\n          className=\"input\"\n          type=\"text\"\n          value={inputItem}\n          onChange={handleInputChange}\n          placeholder=\"Enter a task\"\n        />\n        <button className=\"btn\" onClick={handleAddTodo}>\n          Submit\n        </button>\n      </div>\n\n      <ul>\n        {list.map((item) => (\n          <li className=\"task\" key={item.id}>\n            {item.item}\n            <button onClick={() => handleDeleteTodo(item.id)}>Delete</button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  </div>\n  );\n};\n\nexport default ToDo;\n","import React, { useEffect, useState } from 'react';\nimport AxiosInstance from '../../axiosinstance'; \nimport { Link } from 'react-router-dom';\nimport './projects.css'; // Page-specific styles (loaded last)\nimport todoListGif from '../images/todo_list_demo.gif';\n\nconst Projects = () => {\n    const [projects, setProjects] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [error, setError] = useState(null);\n\n    useEffect(() => {\n        const fetchProjects = async () => {\n            try {\n                const response = await AxiosInstance.get('/projects/');   \n                setProjects(response.data);\n            } catch (err) {\n                console.error('Error fetching projects:', err);\n                setError('Failed to load projects. Please try again later.');\n            } finally {\n                setLoading(false);\n            }\n        };\n\n        fetchProjects();\n    }, []);\n\n    if (loading) return <p>Loading...</p>;\n    if (error) return <p>{error}</p>;\n\n    return (\n        <div className='projects-page'>\n            <h1 className='project-header'>Projects</h1>\n        <div className=\"projects-container\">\n            {/* To Do List Block */}\n            <div className=\"project-block\">\n                <div className=\"project-image-container\">\n                    <img\n                        src={todoListGif} // Replace with your To-Do list image URL\n                        alt=\"To Do List\"\n                        className=\"project-image\"\n                    />\n                </div>\n                <Link\n                    to=\"/todo\"\n                    className=\"project-title\"\n                    aria-label=\"Navigate to To Do List application\"\n                >\n                    <p>To Do List</p>\n                </Link>\n                <p className=\"project-description\">\n                    Interactive to do list application. This was the first component that I developed for this website. It was a large learning curve and required learning\n                    and using Django, PostGreSQL, React, and axios API.\n                </p>\n            </div>\n\n            {/* Dynamically loaded projects */}\n            {projects.map((project, index) => (\n                <div key={project.name} className=\"project-block\" data-priority={index + 2}>\n                    <div className=\"project-image-container\">\n                        <img\n                            src={project.image}\n                            alt={project.name}\n                            className=\"project-image\"\n                        />\n                    </div>\n                    <a\n                        href={project.github_url}\n                        className=\"project-title\"\n                        target=\"_blank\"\n                        rel=\"noopener noreferrer\"\n                        aria-label={`Visit GitHub page for ${project.name}`}\n                    >\n                        <p>{project.name}</p>\n                    </a>\n                    <p className=\"project-description\">{project.description}</p>\n                </div>\n            ))}\n        </div>\n    </div>\n    );\n};\n\nexport default Projects;","import React, { useState, useEffect } from 'react';\nimport AxiosInstance from '../../axiosinstance'; \nimport { useNavigate } from 'react-router-dom'; // Correctly import useNavigate\nimport './writing.css'\n\n// This is the writing landing page, which contains all of the blogs with the first 100 words of the body text.\n// The user can then click on the title of each blog and they are then taken to the post detail page\nconst WritingLandingPage = () => {\n  const [posts, setPosts] = useState([]);\n  const navigate = useNavigate();\n\n  const getPostData = async () => {\n    try {\n      const response = await AxiosInstance.get('/writing/');\n      if (response.status === 200) {\n        setPosts(response.data);\n      } else {\n        console.error('Error fetching data: Response is undefined or status is not 200');\n      }\n    } catch (error) {\n      console.error('Error fetching data:', error.message);\n    }\n  };\n\n  useEffect(() => {\n    getPostData();\n  }, []);\n  \n  // Sort posts by 'created_on' date, with newest at the top\n  // The sortedPosts variable uses the Array.sort() method to sort the posts array by the created_on date in ascending order (oldest first).\n  // new Date(a.created_on): Converts the created_on string into a JavaScript Date object for comparison.\n  // Ascending Order: Subtracts a.created_on from b.created_on. To reverse the order, you could subtract b.created_on from a.created_on.\n  const sortedPosts = [...posts].sort((a, b) => new Date(b.created_on) - new Date(a.created_on));\n\n  // Function to handle post click\n  const handlePostClick = (postId) => {\n    navigate(`/writing/${postId}`); // Redirect to the detailed view of the post\n  };\n\n  return (\n    <div>\n      <h1 className='landing-page-heading'>Writing</h1>\n      {sortedPosts.length === 0 ? (\n        <div>Loading...</div>\n      ) : (\n        <div>\n          {sortedPosts.map((post) => (\n            <div className=\"writing-block\" key={post.id}>\n              <h2 className='writing-title' style={{ cursor: 'pointer' }} onClick={() => handlePostClick(post.id)}>\n                {post.title}\n              </h2>\n              <p>Publication date: {new Date(post.publication_date).toLocaleDateString('en-GB', {\n              day: '2-digit',\n              month: 'long',\n              year: 'numeric',\n              })}</p>\n              <p>Created on: {new Date(post.created_on).toLocaleDateString('en-GB', {\n              day: '2-digit',\n              month: 'long',\n              year: 'numeric',\n              })}</p>\n              <p>\n                {post.body.length > 100 ? `${post.body.substring(0, 100)}...` : post.body}\n              </p>\n            </div>\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default WritingLandingPage;\n\n// import React, { useState, useEffect } from 'react';\n// import AxiosInstance from '../../axiosinstance'; \n// import { useNavigate } from 'react-router-dom'; // Correctly import useNavigate\n// import './writing.css'\n\n// const WritingLandingPage = () => {\n//   const [posts, setPosts] = useState([]);\n//   const navigate = useNavigate();\n\n//   const getPostData = async () => {\n//     try {\n//       const response = await AxiosInstance.get('/writing/');\n//       console.log('Fetched response:', response.data);\n//       if (response.data && response.data.posts && Array.isArray(response.data.posts)) {\n//         const postsWithValidBody = response.data.posts.map(post => ({\n//           ...post,\n//           body: post.body || '', // Provide a fallback for 'body' if it's undefined\n//         }));\n//         setPosts(postsWithValidBody);\n//       } else {\n//         console.error('Error: The posts data is not an array or is missing.');\n//       }\n//     } catch (error) {\n//       console.error('Error fetching data:', error.message);\n//     }\n//   };\n  \n\n//   useEffect(() => {\n//     getPostData();\n//   }, []);\n  \n//   // Sort posts by 'created_on' date, with newest at the top\n//   const sortedPosts = [...posts].sort((a, b) => new Date(b.created_on) - new Date(a.created_on));\n\n//   // Function to handle post click\n//   const handlePostClick = (postId) => {\n//     navigate(`/writing/${postId}`); // Redirect to the detailed view of the post\n//   };\n\n//   return (\n//     <div>\n//       <h1 className='landing-page-heading'>Writing</h1>\n//       {sortedPosts.length === 0 ? (\n//         <div>Loading...</div>\n//       ) : (\n//         <div>\n//           {sortedPosts.map((post) => (\n//             <div className=\"writing-block\" key={post.id}>\n//               <h2 className='writing-title' style={{ cursor: 'pointer' }} onClick={() => handlePostClick(post.id)}>\n//                 {post.title}\n//               </h2>\n//               <p>Publication date: {new Date(post.publication_date).toLocaleDateString('en-GB', {\n//               day: '2-digit',\n//               month: 'long',\n//               year: 'numeric',\n//               })}</p>\n//               <p>Created on: {new Date(post.created_on).toLocaleDateString('en-GB', {\n//               day: '2-digit',\n//               month: 'long',\n//               year: 'numeric',\n//               })}</p>\n//               <p>\n//                 {post.body && post.body.length > 100 \n//                   ? `${post.body.substring(0, 100)}...` \n//                   : post.body || 'No content available'}\n//               </p>\n//             </div>\n//           ))}\n//         </div>\n//       )}\n//     </div>\n//   );\n// };\n\n// export default WritingLandingPage;\n","import React, { useEffect, useState } from 'react';\nimport AxiosInstance from '../../axiosinstance'; \nimport { useParams, useNavigate } from 'react-router-dom';\nimport DOMPurify from 'dompurify';\nimport './writing.css'\n\n// This is the page that contains the entire post\nconst PostDetail = () => {\n  const { postId } = useParams(); // Extract postId from URL parameters\n  const [post, setPost] = useState(null);\n  const navigate = useNavigate();\n\n  useEffect(() => {\n    const fetchPost = async () => {\n      try {\n        const response = await AxiosInstance.get(`/writing/${postId}/`); // Fetch the specific post\n        setPost(response.data); // Set the post data to state\n      } catch (error) {\n        console.error('Error fetching post details:', error);\n      }\n    };\n\n    fetchPost();\n  }, [postId]); // Fetch post whenever postId changes\n\n  if (!post) return <div>Loading...</div>; // Show loading state while fetching data\n\n  // Split the post body into paragraphs based on newline characters\n  const SplitParagraphs= post.body.split('\\n').filter(paragraph => paragraph.trim() !== '');\n  // paragraph =>...: filter methods creates new array containing elements of old array passed from the earlier part of the function\n  // The function paragraph => paragraph.trim() !== '' is an arrow function that takes a single parameter, paragraph.\n  // trim method removes whitespace from both the beginning and the end of the string\n  // !== '': This part checks if the trimmed paragraph is not equal to an empty string. If the result of trim() is not an empty string, \n  // it means that the paragraph contains some actual content (i.e., it's not just whitespace).\n\n  // Sanitize and modify links to open in a new tab\n  //  The map() method requires a function to process each element in SplitParagraphs, and the arrow function (paragraph => ...) is passed as the argument to map().\n  // The parentheses around the arrow function are necessary because you're passing the arrow function as an argument to the map() method.\n  // \n  const sanitizedParagraphs = SplitParagraphs.map(paragraph =>\n    DOMPurify.sanitize(paragraph, {\n      ADD_ATTR: ['target'], // Allow target attribute By default, sanitizers often strip attributes like target for security reasons.\n      // This option explicitly allows the target attribute, enabling us to later modify links to open in a new tab.\n      FORBID_TAGS: ['script'], // Disallow script tags for security. Prevents <script> tags from being included in the sanitized output, as they could execute harmful JavaScript code.\n    // Add target=\"_blank\" to links. Ensures that any <a> tag in the sanitized HTML has the target=\"_blank\" attribute, which makes the link open in a new tab.\n    }).replace(\n      // Matches any <a> tag that does not already have a target attribute. <a\\s+ matches the <a> tag with at least one space after it.\n      // (?!.*target) is a negative lookahead that ensures the target attribute is not present anywhere in the tag.\n      // The /g flag means this replacement will be applied globally (to all <a> tags in the string).\n      /<a\\s+(?!.*target)/g,\n      // Adds the target=\"_blank\" attribute to the <a> tag.\n      '<a target=\"_blank\" '\n    )\n  );\n\n    // Handle go back to the previous page\n    const handleGoBack = () => {\n      navigate(-1);  // This goes back one page in history\n    };\n\n\n    return (\n      <div>\n        <button className=\"return-button\" onClick={handleGoBack}>Return to Writing Page</button>\n        <h1>{post.title}</h1>\n        <p>\n          Publication date:{' '}\n          {new Date(post.publication_date).toLocaleDateString('en-GB', {\n            day: '2-digit',\n            month: 'long',\n            year: 'numeric',\n          })}\n        </p>\n        <p>\n          Created on:{' '}\n          {new Date(post.created_on).toLocaleDateString('en-GB', {\n            day: '2-digit',\n            month: 'long',\n            year: 'numeric',\n          })}\n        </p>\n        {/* Render each paragraph with dangerouslySetInnerHTML */}\n        {sanitizedParagraphs.map((paragraphs, index) => (\n          <p\n            key={index}\n            dangerouslySetInnerHTML={{__html: paragraphs}}\n            // To create the link in django admin, use this format \n            // <a href=\"https://www.axelos.com/resource-hub/blog/itil-4-foundation-7-tips-to-prepare\" target=\"_blank\">here</a>.\n            // React dangerouslySetInnerHTML react replacement for innerHTML. It makes react aware of HTML tags in rich text editor\n            // i.e. django admin interface, and renders them properly. Should be an object with the __html key passed the component. Only use with trusted sources as it makes the site vulnerable to XSS attacks.\n            //  \n          ></p>\n        ))}\n      </div>\n    );\n  };\n\nexport default PostDetail;\n","import React, { useState } from 'react';\nimport AxiosInstance from '../../axiosinstance'; \nimport './contact.css';\n\n// State initialisation: formData holds the data entered by the user in the below fields. setFormData updates the fields with the user's input\nfunction ContactPage() {\n    const [formData, setFormData] = useState({\n        name: '', // The value in the useState here is the initial value. It is blank here as the user has not yet submitted their info.\n        email: '',\n        subject: '',\n        message: '',\n    });\n\n    // Boolean state, tracks whether the form was submitted or not. Initially set to false, meaning that the form has not been submitted\n    const [submitted, setSubmitted] = useState(false);\n    \n    // Triggered when user types into field. The e.target refers to the input field that was changed.\n    // name is the name of the form field (e.g., \"name\", \"email\", \"subject\", etc.), and value is the new value entered by the user.\n    // The setFormData updates the formData state to reflect the new value of the field that was changed. This is done by spreading \n    // the existing formData and updating the specific field based on its name.\n    const handleChange = (event) => { // event represents all of the actions taken by the user\n        const { name, value } = event.target;   // event.target refers to the DOM element (html) that triggered the \n        // event i.e. the form field completed by user. the event.target is deconstructed to name of field, and value inputted.\n        setFormData({\n            ...formData,\n            [name]: value,\n        });\n    };\n\n    // Called when user clicks submit\n    // e.preventDefault() is used to prevent the default form submission behavior, so the page doesn’t reload.\n    // Sends to bakcned via axios\n    // formData is the data that the user has entered in the form, and it’s sent as the body of the POST request\n    const handleSubmit = async (e) => {\n        e.preventDefault();\n        try {\n            const response = await AxiosInstance.post('/contact/', formData, {\n                headers: {\n                    'object': 'formobject',\n                },\n            });\n            \n            // Waits for response from axios\n            // If the response status is 201 (created, meaning the email was successfully sent and saved), the form fields are reset using setFormData (all fields are cleared)\n            // After resetting the form, setSubmitted(true) sets the submitted state to true, which will display the \"Thank you\" message.\n            // If the request fails, it logs the error to the console.\n            if (response.status === 201) {\n                // Reset the form immediately after the successful submission\n                setFormData({\n                    name: '',\n                    email: '',\n                    subject: '',\n                    message: '',\n                });\n                setSubmitted(true);\n            } else {\n                console.error('Failed to send message:', response);\n            }\n        } catch (error) {\n            console.error('Error:', error);\n        }\n    };\n\n    // handleReset is called when the user clicks the \"Submit Another Message\" button after the form is successfully submitted.\n    // This function resets the form data back to its initial empty values and also sets submitted back to false so the form will be shown again (not the \"Thank you\" message).\n    const handleReset = () => {\n        // Reset form data and submitted state if they want to submit another message\n        setFormData({\n            name: '',\n            email: '',\n            subject: '',\n            message: '',\n        });\n        setSubmitted(false);\n    };\n\n    // The button is hooked to handleReset, which clears the form and allows the user to send a new message.\n    if (submitted) {\n        return (\n            <div className=\"thank-you\">\n                <h2>Thank you for contacting me</h2>\n                <p>I have received your message and will get back to you shortly.</p>\n                <button onClick={handleReset}>Submit another message</button>\n            </div>\n        );\n    }\n\n    // If submitted is false, this renders the contact form.\n    // value={formData.name} binds the form fields to the corresponding values in formData.\n    // onChange={handleChange} ensures that when a user types in the field, formData gets updated.\n    return (\n        <div className=\"contact-page\">\n            <h1>Contact me</h1>\n            <form onSubmit={handleSubmit} className=\"contact-form\">\n                <div className=\"form-group\">\n                    <label htmlFor=\"name\">Name:</label>\n                    <input\n                        type=\"text\"\n                        id=\"name\"\n                        name=\"name\"\n                        value={formData.name}\n                        onChange={handleChange}\n                        placeholder=\"Your Name\"\n                        required\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"email\">Email:</label>\n                    <input\n                        type=\"email\"\n                        id=\"email\"\n                        name=\"email\"\n                        value={formData.email}\n                        onChange={handleChange}\n                        placeholder=\"Your Email\"\n                        required\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"subject\">Subject:</label>\n                    <input\n                        type=\"text\"\n                        id=\"subject\"\n                        name=\"subject\"\n                        value={formData.subject}\n                        onChange={handleChange}\n                        placeholder=\"Subject\"\n                        required\n                    />\n                </div>\n                <div className=\"form-group\">\n                    <label htmlFor=\"message\">Message:</label>\n                    <textarea\n                        id=\"message\"\n                        name=\"message\"\n                        value={formData.message}\n                        onChange={handleChange}\n                        placeholder=\"Your Message\"\n                        rows=\"5\"\n                        required\n                    />\n                </div>\n                <button type=\"submit\">Send Message</button>\n            </form>\n        </div>\n    );\n}\n\nexport default ContactPage;\n// Overall:\n// The forms is initiliased with blank fields\n// The user enters their data into the form fields.\n// When the form is submitted, the setFormData is updated with the values from the formData\n// The data is sent to the backend (Django) via axios.\n// If the form is successfully submitted (i.e., the response status is 201), the form is cleared, and the \"Thank you\" message is displayed.\n// The user can click \"Submit Another Message\" to reset the form to its initial empty state, and they can send another message.","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './about.css'\nimport aboutImage from '../images/pixeltrue-idea-1.png';\n\nfunction About() {\n    return (\n      <div>\n        <h1 className='about-heading'>About</h1>\n        <p className='about-me'> I am a software developer based in London, UK. I recently graduated from Makers software development bootcamp \n            and have been further developing my skills via projects, coding challenges and volunteering with Unify Giving.\n            Before my career change, I was an editor and writer for several years. You can find examples of my work in \n            the <Link to=\"/writing\">writing</Link> page, where you can also read my musings on tech, books and other topics. \n            You can find out more about me at <a href=\"https://www.linkedin.com/in/solmaz-purser-853280115/\" target=\"_blank\" \n            rel=\"noopener noreferrer\">LinkedIn</a> and <a href=\"https://github.com/bookloversolmaz\" target=\"_blank\" rel=\"noopener noreferrer\">GitHub</a>. \n            You can also contact me <Link to=\"/contact\">here.</Link>\n        </p>\n        {/* Image with attribution */}\n        <div className=\"about-image-container\">\n          <img \n            src={aboutImage} \n            alt=\"Woman Illustration\" \n            className=\"about-image\" \n          />\n        </div>\n        <footer className=\"attribution\">\n                Illustrations by <a href=\"https://icons8.com/illustrations\" target=\"_blank\" rel=\"noopener noreferrer\">Icons8</a> \n        </footer>\n      </div>\n  );\n};\nexport default About;","import React, { useState } from 'react';\nimport { SocialIcon } from 'react-social-icons';\nimport './header.css';\n\nfunction Header() {\n    const [dropdownOpen, setDropdownOpen] = useState(false);\n\n    const toggleDropdown = () => {\n        setDropdownOpen(!dropdownOpen);\n    };\n\n    return (\n        <header>\n            <nav aria-label=\"Main navigation\">\n                <ul className=\"nav-list\">\n                    {/* Dropdown Menu */}\n                    <li className=\"dropdown\">\n                        <button\n                            className=\"dropdown-button\"\n                            onClick={toggleDropdown}\n                            aria-haspopup=\"true\"\n                            aria-expanded={dropdownOpen}\n                        >\n                            Menu\n                        </button>\n                        {dropdownOpen && (\n                            <ul className=\"dropdown-menu\">\n                                <li><a href=\"/\">Home</a></li>\n                                <li><a href=\"/about\">About</a></li>\n                                <li><a href=\"/projects\">Projects</a></li>\n                                <li><a href=\"/writing\">Writing</a></li>\n                                <li><a href=\"/contact\">Contact</a></li>\n                                <li><a href=\"/todo\">To do list</a></li>\n                            </ul>\n                        )}\n                    </li>\n                    <div className=\"social-links\">\n                        <li>\n                            <SocialIcon \n                                url=\"https://github.com/bookloversolmaz\" \n                                target=\"_blank\" \n                                rel=\"noopener noreferrer\"\n                                style={{ height: 30, width: 30 }} \n                            />\n                        </li>\n                        <li>\n                            <SocialIcon \n                                url=\"https://www.linkedin.com/in/solmaz-purser-853280115/\" \n                                target=\"_blank\" \n                                rel=\"noopener noreferrer\"\n                                style={{ height: 30, width: 30 }} \n                            />\n                        </li>\n                    </div>\n                </ul>\n            </nav>\n        </header>\n    );\n}\n\nexport default Header;","// In React, App.js is typically the main entry point and acts as the root \n// component of the application. It's where you define the overall structure and layout of your application, \n// including routing and the main layout components.\n\nimport React from \"react\";\nimport {Routes, Route } from \"react-router-dom\";\nimport Home from '../home/home.js';\nimport Todo from '../todo/todo.js';\nimport Projects from '../projects/projects.js'\nimport WritingLandingPage from '../writing/writinglandingpage.js'\nimport PostDetail from \"../writing/postdetail.js\";\nimport ContactPage from \"../contact/contact.js\";\nimport About from \"../about/about.js\"\nimport Header from '../header/header.js';  //Header component\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Header />\n        <Routes>\n          <Route path=\"/\" element={<Home />} />\n          <Route path=\"/about\" element={<About />} />\n          <Route path=\"/todo\" element={<Todo />} />\n          <Route path=\"/projects\" element={<Projects />} />\n          <Route path=\"/writing\" element={<WritingLandingPage/>} />\n          <Route path=\"/writing/:postId\" element={<PostDetail />} />\n          <Route path=\"/writing/:postId\" element={<PostDetail />} />\n          <Route path=\"/contact\" element={<ContactPage />} />\n        </Routes>\n    </div>\n  );\n};\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport App from './components/app/App';\nimport './index.css';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\n// document.getElementById('root') is a JavaScript DOM manipulation method that retrieves the DOM element with the id attribute set to 'root'. \n// In this case, it is index.html\n// Use createRoot to render the app\ncreateRoot(document.getElementById('root')).render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>\n);\n\n\n// Report web vitals\nreportWebVitals();"],"sourceRoot":""}